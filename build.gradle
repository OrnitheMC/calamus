import com.google.common.hash.Hashing
import com.google.common.io.Files
import cuchaz.enigma.command.ConvertMappingsCommand
import groovy.json.JsonSlurper
import groovy.xml.XmlSlurper
import net.fabricmc.stitch.merge.JarMerger
import net.fabricmc.stitch.util.CalamusUtil
import net.ornithemc.nester.Nester
import org.apache.commons.io.FileUtils

import java.nio.charset.Charset
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            name "Quilt"
            url "https://maven.quiltmc.org/repository/release"
        }
        maven {
            name "Ornithe"
            url "https://maven.ornithemc.net/releases"
        }
    }

    dependencies {
        classpath "net.ornithemc:enigma-cli:1.2.2"
        classpath "net.ornithemc:nester:0.2.5"
        classpath "net.ornithemc:stitch:0.7.4"
        classpath "commons-io:commons-io:2.8.0"
        classpath "org.codehaus.groovy:groovy-json:3.0.9"
        classpath "org.codehaus.groovy:groovy-xml:3.0.9"
    }
}

plugins {
    id 'de.undercouch.download' version '4.1.1'
    id 'java'
    id 'maven-publish'
}

def ENV = System.getenv()

def jarSetupGroup = "jar setup"
def mappingGenerationGroup = "mapping generation"
def cacheFilesMinecraft = file(".gradle/minecraft")
def minecraft_version = ENV.MC_VERSION
def manifestFile = new File(cacheFilesMinecraft, "version_manifest.json")
def versionFile = new File(cacheFilesMinecraft, "${minecraft_version}.json")
def versionDetailsFile = new File(cacheFilesMinecraft, "${minecraft_version}-details.json")
def clientJar = new File(cacheFilesMinecraft, "${minecraft_version}-client.jar")
def serverJar = new File(cacheFilesMinecraft, "${minecraft_version}-server.jar")
def mergedFile = new File(cacheFilesMinecraft, "${minecraft_version}-merged.jar")
def nestedMergedFile = file("${minecraft_version}-mn.jar")
def calamusFile = file("mappings/${minecraft_version}.tiny")

static boolean validateChecksum(File file, String checksum) {
    if (file != null) {
        //noinspection GrDeprecatedAPIUsage
        def hash = Files.asByteSource(file).hash(Hashing.sha1())
        def builder = new StringBuilder()
        hash.asBytes().each {
            builder.append(Integer.toString((it & 0xFF) + 0x100, 16).substring(1))
        }
        return builder.toString() == checksum
    }
    return false
}

task downloadVersionsManifest {
    group = jarSetupGroup
    //inputs.property "mc_ver", minecraft_version
    inputs.property "currenttime", new Date()

    outputs.file(manifestFile)

    doLast {
        logger.lifecycle(":downloading minecraft versions manifest")
        FileUtils.copyURLToFile(new URL("https://skyrising.github.io/mc-versions/version_manifest.json"), manifestFile)
    }
}

static def getManifestVersion(File manifestFile, String minecraft_version) {
    def manifest = manifestFile.exists() ? new JsonSlurper().parseText(FileUtils.readFileToString(manifestFile, Charset.defaultCharset())) : null
    return manifest != null ? manifest.versions.stream().filter({
        (it.id == minecraft_version)
    }).findFirst() : java.util.Optional.empty()
}

task downloadWantedVersionManifest(dependsOn: downloadVersionsManifest) {
    group = jarSetupGroup
    def manifestVersion = getManifestVersion(manifestFile, minecraft_version)
    //have to grab the release time as there's a current timestamp on each element?!
    inputs.property "releaseTime", manifestVersion.isPresent() ? manifestVersion.get().releaseTime : -1

    outputs.file versionFile

    doLast {
        manifestVersion = getManifestVersion(manifestFile, minecraft_version)
        //nb need to re-read here in case it didn't exist before
        if (manifestVersion.isPresent() || versionFile.exists()) {

            if (manifestVersion.isPresent()) {
                FileUtils.copyURLToFile(new URL(manifestVersion.get().url), versionFile)
            }
        } else {
            throw new RuntimeException("No version data for Minecraft version ${minecraft_version} (Did you forget to set the MC_VERSION environment variable?)")
        }
    }
}

task downloadWantedVersionDetails(dependsOn: downloadVersionsManifest) {
    group = jarSetupGroup
    def manifestVersion = getManifestVersion(manifestFile, minecraft_version)
    inputs.property "manifestUrl", manifestVersion.isPresent() ? manifestVersion.get().url : -1

    outputs.file versionDetailsFile

    doLast {
        manifestVersion = getManifestVersion(manifestFile, minecraft_version)

        if (manifestVersion.isPresent() || versionDetailsFile.exists()) {
            if (manifestVersion.isPresent()) {
                FileUtils.copyURLToFile(new URL(manifestVersion.get().details), versionDetailsFile)
            }
        } else {
            throw new RuntimeException("No version details for Minecraft version ${minecraft_version} (Did you forget to set the MC_VERSION environment variable?)")
        }
    }
}

task downloadMcJars(dependsOn: downloadWantedVersionManifest) {
    group = jarSetupGroup
    inputs.files versionFile

    outputs.files(clientJar, serverJar)
    outputs.upToDateWhen {
        def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, Charset.defaultCharset()))
        return clientJar.exists() && serverJar.exists() && validateChecksum(clientJar, version.downloads.client.sha1) && validateChecksum(serverJar, version.downloads.server.sha1)
    }

    doLast {
        if (!versionFile.exists()) {
            throw new RuntimeException("Can't download the jars without the ${versionFile.name} file!")
        }

        //reload in case it changed
        def version = new JsonSlurper().parseText(FileUtils.readFileToString(versionFile, Charset.defaultCharset()))

        logger.lifecycle(":downloading minecraft jars for ${minecraft_version}")

        download {
            src new URL(version.downloads.client.url)
            dest clientJar
            overwrite false
        }

        download {
            src new URL(version.downloads.server.url)
            dest serverJar
            overwrite false
        }
    }
}

task mergeJars(dependsOn: downloadMcJars) {
    group = jarSetupGroup
    inputs.files downloadMcJars.outputs.files.files

    outputs.file(mergedFile)

    doLast {
        logger.lifecycle(":merging jars")
        def client = inputs.files.files.find { it.name.endsWith("-client.jar") }
        def server = inputs.files.files.find { it.name.endsWith("-server.jar") }
        def merged = mergedFile

        if (merged.exists()) {
            return
        }

        def jarMerger = new JarMerger(client, server, merged)
        jarMerger.merge()
        jarMerger.close()
    }

}

task nestJar(dependsOn: mergeJars) {
    group = jarSetupGroup
    inputs.file mergedFile

    outputs.file(nestedMergedFile)

    doLast {
        logger.lifecycle(":nesting jar")
        def merged = mergedFile
        def nested = nestedMergedFile

        if (nested.exists()) {
            return
        }

        def nestMapping = file("nests/${minecraft_version}.nest")

        Nester.fixJar(Paths.get(merged.getAbsolutePath()), Paths.get(nested.getAbsolutePath()), Paths.get(nestMapping.getAbsolutePath()))
    }

}

// this task will probably not work for certain versions, but we'll cross that bridge when we get there
task generateCalamus(dependsOn: [downloadWantedVersionDetails, nestJar]) {
    group = mappingGenerationGroup
    inputs.file nestedMergedFile

    outputs.file(calamusFile)
    outputs.upToDateWhen {
        return calamusFile.exists()
    }

    // TODO: this only works to generate Calamus mappings from scratch, still have to add update functionality
    doLast {
        if (calamusFile.exists()) {
            return
        }

        CalamusUtil.generateCalamus(nestedMergedFile, calamusFile, null)
    }
}

static List<String> getPublishedVersions() {
    def xml = new URL("https://maven.ornithemc.net/releases/net/ornithemc/calamus/maven-metadata.xml").text
    def metadata = new XmlSlurper().parseText(xml)
    def versions = metadata.versioning.versions.version*.text()
    return versions
}

def publishedVersions
try {
    publishedVersions = getPublishedVersions()
} catch (ignored) {
}

def localMappingsPath = "$buildDir/v2Mappings"
new File(localMappingsPath).mkdirs()
file('mappings').eachFile {
    if (!it.name.endsWith(".tiny")) return

    def mcVer = it.name.replace(".tiny", "")

    if (publishedVersions != null && publishedVersions.contains(mcVer)) {
        project.logger.lifecycle("Skipping ${mcVer} as it has already been released")
        return
    }

    File v1MappingFile = it
    File v2MappingFile = new File("$localMappingsPath/${it.name}")

    def conversionTask = "convert${it.name}ToV2"
    tasks.register(conversionTask) {
        group = "V2 Conversion"
        inputs.file(v1MappingFile)
        outputs.file(v2MappingFile)

        doLast {
            new ConvertMappingsCommand().run(
                    "tiny",
                    v1MappingFile.path,
                    "tinyv2:official:calamus",
                    v2MappingFile.path
            )
        }
    }

    Jar makeV1Jar = makeJar(mcVer, v1MappingFile, false)
    Jar makeV2Jar = makeJar(mcVer, v2MappingFile, true)


    build.dependsOn makeV1Jar
    build.dependsOn makeV2Jar

    makeV2Jar.dependsOn conversionTask

    publishing {
        publications {
            create("${mcVer.replace(" ", "")}_mavenJava", MavenPublication) {
                groupId 'net.ornithemc'
                artifactId "calamus"
                version mcVer
                artifact(makeV1Jar.archiveFile) {
                    builtBy makeV1Jar
                }
                artifact(makeV2Jar.archiveFile) {
                    builtBy makeV2Jar
                    classifier = "v2"
                }
            }
        }
    }

}

def makeJar(String mcVersion, File mappings, boolean v2) {
    def jarFilename = "calamus-" + mcVersion + (v2 ? "-v2" : "")
    return task("${mcVersion}_makeJar" + (v2 ? "v2" : ""), type: Jar) {
        baseName jarFilename
        from(file(mappings)) {
            into "mappings"
            rename mappings.name, "mappings.tiny"
        }
        destinationDirectory = file("build/jars")
    }
}

publishing {
    repositories {
        if (ENV.MAVEN_URL) {
            maven {
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}
